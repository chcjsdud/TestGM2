#include <iostream>

// main() 함수라고 부르고

// 자료형(리턴값) 이름  인자
// int           main  () <= 행동의 정의
// { <= 그 실제 내용의 시작
// } <= 그 실제 내용의 끝. 

// 아무것도 없음
// 무시해도 됨.
// main이 int를 리턴해야한다고 착각하는 사람들이 있는데. 놉.
// 함수의 역할은 다음과 같습니다.

// Action 프로그래밍에서

// 함수의 내용은 무조건 동사로 표현되는것이 기본이다.
// 행동 => 프로그램을 시작한다.
// 어셈블리어 => 인간이 사용하기 어렵고 배우기 어려운 언어.
// 고급언어 => C, C++, java c# 등등등 통칭
// 그중에서 우리는 C++을 배우고 있다.
// 최초의 C는 프로그래밍을 쉽게하려면 어떻게 해야 할까?
// 머릿속의 생각을 문법과 연계시키기 좋아야 한다.

// 액션적인 측면이 벌어지는 것은 함수로 표현하기로 했다.
// 그러려면 함수라는 것을 만들어야 한다.
// 함수 => 어떤 벌어지게 만드는 문법 
// 안되는 

// 싸운다라는 행동 그자체를 만들어야 ㅎ
// 다른 방법이 없어 
// 행동을 제한하고 묶는 역할도 있다.
void Fight()
{
	// 싸운다.
	// 회복한다
}

void Heal()
{
	// 싸운다.
	// 회복한다
}

void PlayerCreate()
{
	int PlayerHP = 0;
	int PlayerAtt = 0;
	int Def = 10;
}

void CreateMonster()
{
	int MonsterImageLoad0 = 0;
	int MonsterImageLoad1 = 0;
	int MonsterImageLoad = 0;

}

void PlayerAndMonsterDeathCheck()
{

}

// Action 인터페이스로 대화한다고 합닏3ㅏ. 

// 이게 가장 기초적인 함수 문법입니다.
void main()
{
	// 기본적인 디버깅
	// 
	// F11 프로그래밍을 다른 함수의 내부까지 들어가서 한줄한줄 실행한다.
	// F10 함수는 건너 뛰실행한다.
	// 
	// F5 중단점이 존재하는 곳까지 실행한다.
	// F9 중단점을 선언한다.

	// 비주얼 스튜디오 기능입니다
	// Ex) F5로 실행하면 현 상황에서는 
	// 그냥 무언가 켜지는 것처럼 보였다가 

	//PlayerCreate();
	//CreateMonster();
	//Fight();

}


