// 052_headerAndCpp.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include "Player.h"


//int b = 0;
//int b = 0;

// 클래스 선언은
// 나뉘어진 파일에서의 중복은 문제가 안됩니다.
class Monster
{
};


// 선언과 구현을 명확하게 구분할수 있어야 한다.

// 1. 선언
// 2. 구현
// 3. 선언과 구현 합일

// 3. 선언과 구현이 동시에 된 경우
//    함수 만들던것처럼 만들면 선언과 구현을 동시에 했다고 합니다.
//void Test()
//{
//}

// 3.

// 함수는 선언과 구현을 분리하는 방법이 쉽죠?
// 1. 선언
//void Test();
//
//// 2. 구현
//void Test()
//{
//}

// 선언과 구현을 분리하는것은 쓸데없는 일로 보이게 됩니다.
// 이걸 하면 여러가지 장점이 있습니다.

// 이런 함수 있을거야 믿고 사용해줘
// 나중에 링커가 분명히 구현과 선언을 연결해 줄거야.
// 선언만 위에 모아 놓습니다.
// 1. 선언과 구현을 분리하면 함수의 순서는 이제 중요하지 않다.
//void Test0();
//void Test1();

// 결국 모든 함수의 시작은 진입점부터 시작하기 때문입니다.
void Test8();
// 선언은 아무리 많이 중복해도 문제가 안됩니다.
// 컴파일러 입장에서는 무시하거나 어차피 1개로 만들면 되니까 아무런 의미가 없다.

int main()
{
    Player Test;

    a = 10;

    // 외부기호 오류가 납니다.
    Test8();

    std::cout << "Hello World!\n";
}

void Test8()
{

}

// 선언은 위에 놓고 구현은 메인 아래 놓게 됩니다.
//void Test1()
//{
//}
//
//void Test0()
//{
//
//
//    // 사용불가
//    // 코드는 위에서부터 아래로 읽으니까.
//    Test1();
//}



// 1. 선언 => .h
// 2. 구현 => .Cpp
// 3. 선언과 구현 합일 
// => 문제가 생길 여지가 굉장히 많기 때문에 거의 하지 않게 됩니다.
