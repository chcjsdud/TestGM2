// 017_OperatorEx.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    // 포인터 연산이든
    // 사칙연산이든

    int A = 10;
    // 자기자신에 변화를 주고 자기자신에게 다시 대입하는 
    // 그때 아래와 같은 꼴을 정말 많이 사용하는데.
    // 문법의 변화하지 대부분의 문법은 인간이 코드를 빠르게 치게하기
    // 위해서 발전해왔다.

    // 상수
    // => 코드영역 
    // 문자열상수
    // => 데이터영역 Ro영역

    A += 1; // == A = (A + 1);
    // 내가 알고 대부분의 연산이 축약이 됩니다.
    A /= 1;
    A -= 1;

    // 포인터 연산에서도 축약은 됩니다.
    int* Ptr = &A;
    Ptr = Ptr + 1;
    Ptr += 1; 
    // Ptr = Ptr + 1;
    
    // Ptr 을 정수로 본다면
    // Ptr = Ptr + sizeof(int) * 1;

    // Ptr = Ptr + sizeof(내가 가리키는 자료형) * 1;

    // A + 1 = 0;

    bool* bPtr = 0;
    bPtr = bPtr + 1;

    bPtr = bPtr = bPtr + 1;
    // Ptr = Ptr + sizeof(bool) * 1;

    int* Ptr0 = 0;
    Ptr0 = Ptr0 + 1;
    // Ptr = Ptr + sizeof(int) * 1;

    //Ptr0 = Ptr0 + 1;
    //++Ptr0;
    //Ptr0++;


    // 극혐 하는 질문이 있습니다.
    // xx도 되나요? 
    // xx도 되나요?
    // 너는 팔이 없냐?
    // xx님이 말씀하신 xx가 이런거 아닌가?
    
    // 내가 어느정도의 이해도를 가지고 있는지를 상대에게
    // 인지시키고 전제를 깔고 그걸 기반으로 해서 질문해야 합니다.
    // 질문이 확실해야 한다.
    // 그래서 이 형태로 써봤는데 에러가났습니다.
    
    // 123456789 +
    // 1 + 1 <= 2
    // 1 + 2 <= 완전히 다른거.



    std::cout << "Hello World!\n";
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
