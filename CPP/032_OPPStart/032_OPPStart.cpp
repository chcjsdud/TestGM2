// 032_OPPStart.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// 객체지향의 시발점은 
// C 언어가 컴퓨터에 더 가까운 언어라고 불리는 이유는
// 데이터(변수)와 함수만 있을 뿐이다.
// 인간은 추상적인 개념을 더 잘 이해한다.
// 주인공
// 오크
// 몬스터

// 일단 C 스타일은 없다.

// 그 문법은 모든걸 표현할수 있어야해
// 인간이 무언가를 생각하면 그걸 그대로 => 코드
// 추상적인 개념을 표현할수 있는 문법이란 어떻게 구성되어야 하지?
// 오크 <= 추상적인 존재를 표현하려면
// 상태(변수)
// 행동(함수)
// 이 문법은 상태와 행동을 하나로 묶을수 있는 문법이어야 합니다.
// C에는 없다는 겁니다.

// 추상적인 개념이 메모리적으로 실제하게 되면 객체
// 그리고 그 객체를 지향(최대한 사용하면서)하면서 코딩할수 있는 
// 프로그래밍 패러다임을 객체지향이라고 합니다.

// 객체지향이 되면 접근성이 미친듯이 높아집니다.
// 모든 코딩의 시작은 클래스의 선언이라고 한다.
// 이걸로 객체라는걸 만들수 있다.
// class == 객체(절대로 아니다!!!!!!) 
// 클래스와 객체는 연관성은 있지만 같은 개념은 아닙니다.

// 객체지향 언어의 문법에서 절대로 있으면 안되는게 뭘까요?
// 객체지향이 극단에 이르게 되면 <= 최신 언어들은 
// 모든 class라는 거 내부에 쳐야한다.
class Orc
{
    // 클래스 내부를 맴버 공간.
};
// 전역공간
// 순수한 객체지향 언어라면 전역이라는 개념은 존재해서는 안되
// 전역이 존재하면 그건 절차지향이나 함수형 프로그래밍 패러다임이다.

// 프로그래밍 패러다임 
// 코드로서 어떠한 프로그램을 만듬에 문법적 특성이 
// 있어서 어디에 주력하느냐

// C++ 다중 멀티 패러다임이다.
// 절차
// 객체
// 함수형
// 제네릭
// 위에 네가지가 종합되어 있는 언어.

void Test()
{

}


class Game
{

};

class Player
{
    int Hp;

    void Attack()
    {
    }
};

int main()
{
    std::cout << "Hello World!\n";
}
