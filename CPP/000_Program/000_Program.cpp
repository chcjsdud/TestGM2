
// 프로그램은 컴파일 단계를 거쳐서 나온다.
// 컴파일 단계란 사고 하고 말한다는 것자체가 조건반사 수준으로 바로 나와야 한다.
// 완벽하게 상세한 내용은 몰라도 대략적인 설명은 할수 있어야 한다.
// 전처리 문법 하나는 알려드리겠습니다.
// <= 주석이라고 하는데 코드에 영향을 미치지 않는 메모를 적을 수가 있습니다.
// 주석이라고 부릅니다.

// 전처리기 => 컴파일러 => 어셈블러 => 링커

// 전처리기 
// 1. 주석삭제
// 주석은 기본적으로 .EXE에 포함되지 않으므로 전처리기가 삭제한다.

// 2. 전처리문처리
// 전처리문은 말그대로 전처리 프로그램을 만들기 전에 먼저 처리해야하는 문장들을
// 처리한다.
// 대표적인 전처리문이 바로 #include이다. 
// #include는 파일복사입니다.
// 요약 컨트롤 c 컨트롤 v입니다.

// 앤 파일입니다. 그런데 확장자가 없어도 파일이에요.

// #include <파일명> 복사하겠다 팔일명 안의 내용을
// 물리적인 복사를 말합니다.


// iostream안에 수없이 많은 코드들이 정의되어 있고.

// #include에 대해서 오해하는 것중 하나
#include <iostream>


// 프로그램의 진입점을 main으로 정의하고
// cpu에 내 프로그램이 main부터 실행해서 main의 실행메모리를 
// ram에 확보하고 cpu에 연산하게 하라는 내용이 여기 들어있다.

// 선언은 
// main은 실행될수 있는 코드인데 실행하면 안녕하세요를 화면에 띄워주는 기능이야.
// 이게 실행되면 아무것도 하지마.

// main은 실행 된겁니까 안된겁니까?
// .exe 파일안에 있는 내용을 해석해서 읽으면

// 컴파일러 main() <= 지극히 인간적이다.
// 컴퓨터가 이해하기 쉬운 기호로 변경합니다.

// 컴파일러가 하는 일
// 1. 네임맹글링 의미이는 코드를 => 이름이 겹치지 않게 만드는 일
// 2. 진입점 설정.
// 바꿀수 있는데 까먹음
// 프로세스가 실행되면 최초로 만들어지는 실행흐름을 진입점이라고 합니다.
// 실행흐름은 프로그램은 무조건 위에서부터 아래로 읽는다.
// 읽는 순서 그자체가 실행흐름이다. 
// "안녕하세요"
// 흐름을 만들어 내고 흐름에 메모리가 필요하게 됩니다.
// 그래서 정했다.
// main부터 시작하자.
// main글자 아래부터 시작하자를 .

// 어셈블러. 
// 진짜 2진 언어 어셈블러 언어로 바꿔줍니다.
// 그냥 바꿔준다는 것만 알아요.

// 링커
// 그렇게 해서 하나의 파일이 되어서
// 링커가 이름과 실행흐름을 연결하고 검증합니다.

int main()
{
	std::cout << "안녕하세요";
}
